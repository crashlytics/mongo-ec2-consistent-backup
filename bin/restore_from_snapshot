#!/usr/bin/env ruby
# Restore a previously-snapshotted set of volumes to a functioning raid volume on the target host.
# Order of operations:
# shut down mongo
# find snapshots from date.
# create new volumes based on snapshots 
# attach the new volumes to the instance
# reassemble the raid 
# mount the file system
# start the database

require 'rubygems'
require 'trollop'
require 'date'

lib = File.expand_path(File.dirname(__FILE__) + '/../lib')
$LOAD_PATH.unshift(lib) if File.directory?(lib) && !$LOAD_PATH.include?(lib)

require 'ec2-consistent-backup'

opts = Trollop::options do
  opt :access_key_id, "Access Key Id for AWS", :type => :string, :required => true
  opt :secret_access_key, "Secret Access Key for AWS", :type => :string, :required => true
  opt :devices, "Devices to recover, comma separated", :type => :string, :required => true
  opt :backup_hostname, "Hostname of the backup server.", :type => :string, :required => true
  opt :restore_hostname, "Hostname of the restore server.", :type => :string, :required => true
  opt :type, "Snapshot type, to choose among #{EC2VolumeSnapshoter::KINDS.keys.join(",")}", :default => "daily"
  opt :region, "Target region with instances", :type => :string, :required => true
  opt :zone, "Target zone for new volumes", :type => :string, :required => true
  opt :raid_uuid, "UUID of RAID Volume", :type => :string, :required => true
  opt :dev_mapper_name, "Name of device under /dev/mapper", :type => :string, :required => true
  opt :mount, "Mount point for recovered volume", :type => :string, :required => true
  opt :date, "Date of the snapshot to recover", :type => :string, :required => false
end

aki = opts[:access_key_id]
sak = opts[:secret_access_key]
region = opts[:region]
identifier = EC2InstanceIdentifier.new(aki, sak, region)
backup_instance = identifier.get_instance(opts[:backup_hostname])
recover_instance = identifier.get_instance(opts[:restore_hostname])

def system_call(call, action)
  system(call)
  if $? != 0
    abort "System called failed while #{action}. Exit status: #{$?.exitstatus}"
  end
end

if File.exist?("/dev/mapper/#{ opts[:dev_mapper_name] }")
  log "There's already an array at /dev/mapper/#{ opts[:dev_mapper_name] }, not restoring"
  exit 0
end

system_call("service mongodb stop", "stopping MongoDB")

begin
  snapshoter = EC2VolumeSnapshoter.new(aki, sak, region, backup_instance.id)
  snapshots = snapshoter.list_snapshots(opts[:devices].split(/,/), opts[:type])
rescue Exception => e
  abort "#{e.class}: #{e.message}"
end

abort "No snapshots found!" if snapshots.empty?
 
# Find the snapshots that were tagged with a matching date in YYYY-MM-DD format. 
# If no date is supplied, use today's date (assumes snapshots happen at midnight on the same day).
# Note: This uses the tagged date that we created the snapshot with, so both the backup and restore host need to be in the same TZ.

last_snap = {}

begin 
 if opts[:date]
   target_date = Date.parse(opts[:date])
 else 
   target_date = Date.today
 end
 rescue Exception => e
   abort "#{e.class}: #{e.message}"
end

snapshots.each do |key, value|
  if target_date == Date.parse(key)  
    last_snap = value
  end
end

abort "Couldn't find a snapshot for #{target_date.to_s}!" if last_snap.empty?

# Create volume and attach based on what we have above.

begin
  last_snap.each do |vol|
    tags = vol.tags.to_h
    volume = vol.create_volume(opts[:zone])
    volume.tags.Name = "restore_from_snapshot #{ tags['device'] } from backup of #{ opts[:backup_hostname] } to restore on #{ opts[:restore_hostname] }" 
    sleep 1 until volume.status == :available
    attachment = volume.attach_to(recover_instance, tags["device"])
    log "Attaching #{ tags['device'] }"
    sleep 1 until attachment.status != :attaching
  end
rescue Exception => e
  abort "#{e.class}: #{e.message}"
end

# Sleep for a few seconds for the volume mapper to find the volume.

sleeper = 0
until File.exist?("/dev/mapper/#{ opts[:dev_mapper_name] }")
  if sleeper >= 60
    abort "Waited too long for /dev/mapper/#{ opts[:dev_mapper_name] } to exist. Giving up."
  else
    sleep(10)
    sleeper += 10
  end
end
  
# Mount the volume

system_call("mount -o noatime,noexec,nodiratime /dev/mapper/#{opts[:dev_mapper_name]} #{opts[:mount]}", "mounting data directory")

# Chown database, remove lock, start mongo.

system_call("chown -R mongodb #{opts[:mount]}", "chowning data directory")
system_call("rm #{opts[:mount]}/mongodb/mongod.lock", "removing lock")
system_call("service mongodb start", "starting MongoDB")
